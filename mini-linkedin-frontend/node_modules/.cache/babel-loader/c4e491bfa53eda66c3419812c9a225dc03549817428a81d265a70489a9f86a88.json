{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARIBABU\\\\OneDrive\\\\Desktop\\\\project\\\\mini-linkedin-frontend\\\\client\\\\src\\\\context\\\\PostContext.js\",\n  _s = $RefreshSig$();\n// src/context/PostContext.js\nimport React, { createContext, useReducer, useCallback } from 'react'; // 1. Import useCallback\nimport api from '../api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\n// Create context\nexport const PostContext = /*#__PURE__*/createContext(initialState);\n\n// Reducer\nconst postReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case 'GET_POSTS':\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case 'ADD_POST':\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case 'POST_ERROR':\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\n\n// Provider component\nexport const PostProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(postReducer, initialState);\n\n  // 2. Wrap getPosts in useCallback\n  const getPosts = useCallback(async () => {\n    try {\n      const res = await api.get('/posts');\n      dispatch({\n        type: 'GET_POSTS',\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'POST_ERROR',\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }, []); // 3. Add empty dependency array\n\n  // 4. Wrap addPost in useCallback as well for consistency\n  const addPost = useCallback(async formData => {\n    try {\n      const res = await api.post('/posts', formData);\n      dispatch({\n        type: 'ADD_POST',\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: 'POST_ERROR',\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }, []); // 5. Add empty dependency array\n\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: state.posts,\n      post: state.post,\n      loading: state.loading,\n      error: state.error,\n      getPosts,\n      addPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(PostProvider, \"9kcVcR5yRMTKvpQ2rMBPtykuWNE=\");\n_c = PostProvider;\nvar _c;\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useCallback","api","jsxDEV","_jsxDEV","initialState","posts","post","loading","error","PostContext","postReducer","state","action","type","payload","PostProvider","children","_s","dispatch","getPosts","res","get","data","err","msg","response","statusText","status","addPost","formData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HARIBABU/OneDrive/Desktop/project/mini-linkedin-frontend/client/src/context/PostContext.js"],"sourcesContent":["// src/context/PostContext.js\r\nimport React, { createContext, useReducer, useCallback } from 'react'; // 1. Import useCallback\r\nimport api from '../api';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  posts: [],\r\n  post: null,\r\n  loading: true,\r\n  error: {},\r\n};\r\n\r\n// Create context\r\nexport const PostContext = createContext(initialState);\r\n\r\n// Reducer\r\nconst postReducer = (state, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case 'GET_POSTS':\r\n      return {\r\n        ...state,\r\n        posts: payload,\r\n        loading: false,\r\n      };\r\n    case 'ADD_POST':\r\n      return {\r\n        ...state,\r\n        posts: [payload, ...state.posts],\r\n        loading: false,\r\n      };\r\n    case 'POST_ERROR':\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Provider component\r\nexport const PostProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(postReducer, initialState);\r\n\r\n  // 2. Wrap getPosts in useCallback\r\n  const getPosts = useCallback(async () => {\r\n    try {\r\n      const res = await api.get('/posts');\r\n      dispatch({\r\n        type: 'GET_POSTS',\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: 'POST_ERROR',\r\n        payload: { msg: err.response.statusText, status: err.response.status },\r\n      });\r\n    }\r\n  }, []); // 3. Add empty dependency array\r\n\r\n  // 4. Wrap addPost in useCallback as well for consistency\r\n  const addPost = useCallback(async (formData) => {\r\n    try {\r\n      const res = await api.post('/posts', formData);\r\n      dispatch({\r\n        type: 'ADD_POST',\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: 'POST_ERROR',\r\n        payload: { msg: err.response.statusText, status: err.response.status },\r\n      });\r\n    }\r\n  }, []); // 5. Add empty dependency array\r\n\r\n  return (\r\n    <PostContext.Provider\r\n      value={{\r\n        posts: state.posts,\r\n        post: state.post,\r\n        loading: state.loading,\r\n        error: state.error,\r\n        getPosts,\r\n        addPost,\r\n      }}\r\n    >\r\n      {children}\r\n    </PostContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}