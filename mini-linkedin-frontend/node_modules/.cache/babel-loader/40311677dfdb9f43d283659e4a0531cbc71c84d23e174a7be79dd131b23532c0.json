{"ast":null,"code":"// src/api/index.js\nimport axios from'axios';// Create an instance of axios\nconst api=axios.create({baseURL:'http://localhost:5000/api',// Your backend server URL\nheaders:{'Content-Type':'application/json'}});/*\r\n  Intercepts every request. If a token exists in local storage, \r\n  it adds it to the request's 'x-auth-token' header.\r\n*/api.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers['x-auth-token']=token;}return config;},error=>{return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject"],"sources":["C:/Users/HARIBABU/OneDrive/Desktop/project/mini-linkedin-frontend/client/src/api/index.js"],"sourcesContent":["// src/api/index.js\r\nimport axios from 'axios';\r\n\r\n// Create an instance of axios\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // Your backend server URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n/*\r\n  Intercepts every request. If a token exists in local storage, \r\n  it adds it to the request's 'x-auth-token' header.\r\n*/\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAE,2BAA2B,CAAE;AACtCC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACA;AACA;AACA,EACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,CAAGK,KAAK,CACxC,CACA,MAAO,CAAAD,MAAM,CACf,CAAC,CACAI,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}